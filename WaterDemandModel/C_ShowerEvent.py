__author__ = 'JBreman'
__project__ = 'WaterDemandModel'

#libraries
import random

# functions
import calcAndSampleCumData as CD
import sampleDataBin as SB
import sampling_db as DB
import C_ApplianceType as Appliance


class ShowerEvent(Appliance.ApplianceType):                             # inherits parent class Event()
    """
    This class represents the water generated by a shower head during one event (i.e. one actor using a shower once)

    It calculates:
        - the flowrate of the shower head: By sampling a input distribution
        - the volume of an event: flowrate * duration (determined by the actor class)
    """

    # Objects used/manipulated by class
    __start_time = 0                          # start time of shower event (within a day)
    __flowrate = 0                            # flow rate of shower head
    __duration = 0                            # length of shower
    __volume = 0                              # volume of water generated by a shower event (duration x flowrate)

    def __init__(self,start_time,duration,unit_type):
        """
        :param start_time: start time is the time an event starts. This is determined by the actor class
        :param duration:  is the length of the shower i.e. the length of a shower from its start time to its end (usually minutes). Determined by the actor class
        """
        Appliance.ApplianceType.__init__(self, "shower")

        self.__flowrate = 0

        # Attach the start time and duration to a object:
        self.__start_time = start_time
        self.__duration = duration
        self.__unit_type = unit_type

        #Call class methods needed to get the shower volume:
        self.calcShowerFlowRate()
        self.calcVolume()
        self.getStartTime()

    def calcShowerFlowRate(self):
        """
        Calculates the flow rate of a shower. Requires an input file with a probability distribution for different flowrates
        """
        self.__flowrate = CD.getSampledCumValue(DB.SamplingDatabase.Instance().getDB("SHOWER_FLOWRATE_DATABASE"))                # get flow rate from input distribution

        if type(self.__flowrate) == str:                    # if selected flow rate isn't a number i.e. is in 0.2-0.4 L/min format, than sample from this bin:

            self.__flowrate = SB.sampleDataBin(self.__flowrate)

    def calcVolume(self):

        self.__volume = self.__flowrate * self.__duration

    def getStartTime(self):

        return self.__start_time

    def getVolume(self):

        return self.__volume

    def getUnitType(self):

        return self.__unit_type

if __name__ == "__main__":

    output = ShowerEvent(3,4)

    print output.getVolume()











